// Generated by CoffeeScript 1.6.3
(function() {
  yOSON.AppCore.addModule("validation", (function(Sb) {
    return {
      init: function(oParams) {
        var forms;
        forms = oParams.form.split(",");
        return $.each(forms, function(index, value) {
          var prop, settings;
          settings = {};
          value = $.trim(value);
          for (prop in yOSON.require[value]) {
            settings[prop] = yOSON.require[value][prop];
          }
          return $(value).validate(settings);
        });
      }
    };
  }), ["data/require.js", "libs/plugins/jqValidate.js"]);

  yOSON.AppCore.addModule("calendar", (function(Sb) {
    var arquitectFile, bindEvents, catchDom, coordsDefault, createFile, data, dom, editEvent, equalDates, evtDragend, evtFile, getDate, imgDefault, openFancyBox, removeFile, renderMap, renderMarker, searchMap, setLatLng, st, styleFile, validateFrm;
    st = {
      calendar: "#calendar",
      ctnLoad: ".frm-panel",
      ctnMap: "#ctnMap",
      btnSearch: "#btnSearchMap",
      inptSearch: "#inptSearchMap",
      inptAddress: "#location",
      inptLat: "#latitude",
      inptLog: "#longitude",
      inptPicture: "#picture",
      ctnFile: ".ctn-eventImg",
      imgFile: "#eventImg",
      btnFile: "#btnFile",
      frmEvent: "#frmEvent",
      editEvent: ".editEvent",
      tmplEvent: "#tplEvent",
      tmplEventEdit: "#tplEventEdit"
    };
    dom = {};
    coordsDefault = {
      lat: -12.0777778,
      lng: -76.91111109999997
    };
    imgDefault = "/img/elements/default.jpg";
    arquitectFile = null;
    data = {
      "es": {
        "dayName": ['dom', 'lun', 'mar', 'mié', 'jue', 'vie', 'sab'],
        "monthNames": ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre']
      }
    };
    catchDom = function() {
      dom.calendar = $(st.calendar);
      dom.ctnLoad = $(st.ctnLoad);
      dom.tmplEvent = _.template($(st.tmplEvent).html());
      return dom.tmplEventEdit = _.template($(st.tmplEventEdit).html());
    };
    bindEvents = function() {
      return $('#calendar').fullCalendar({
        events: {
          url: "/json-Event-Date"
        },
        header: {
          left: 'prev,next',
          center: 'title',
          right: 'month,agendaWeek,agendaDay'
        },
        editable: true,
        selectable: true,
        select: function(start, end, allDay) {
          var dateEnd, dateStart, element, flagDate, json;
          flagDate = allDay ? 1 : 0;
          dateStart = $.fullCalendar.formatDate(start, "yyyy-MM-dd HH:mm:ss");
          dateEnd = $.fullCalendar.formatDate(end, "yyyy-MM-dd HH:mm:ss");
          json = {
            "event": "Crear Evento",
            "img": imgDefault,
            "lat": coordsDefault.lat,
            "lng": coordsDefault.lng,
            "flagDate": allDay,
            "dateStart": dateStart,
            "dateEnd": dateEnd,
            "flagAct": true
          };
          element = $(dom.tmplEventEdit(json).replace(/[\n\r]/g, ""));
          return openFancyBox(element, function() {
            var map, marker;
            validateFrm(element);
            map = renderMap();
            marker = renderMarker(map, coordsDefault.lat, coordsDefault.lng, true, evtDragend);
            evtFile(element);
            return searchMap(element, map, marker);
          });
        },
        eventClick: function(calEvent, jsEvent, view) {
          var element, end, start;
          start = $.fullCalendar.formatDate(calEvent.start, "yyyy-MM-dd HH:mm:ss");
          end = $.fullCalendar.formatDate(calEvent.end, "yyyy-MM-dd HH:mm:ss");
          calEvent["fullDate"] = getDate(calEvent.start, calEvent.end, calEvent.allDay);
          calEvent["event"] = "Modificar Evento";
          calEvent["address"] = calEvent["location"];
          calEvent["lat"] = calEvent.coords[0];
          calEvent["lng"] = calEvent.coords[1];
          calEvent["idevent"] = calEvent.id;
          calEvent["flagDate"] = calEvent["allDay"] ? 1 : 0;
          calEvent["dateStart"] = start;
          calEvent["dateEnd"] = end;
          calEvent["flagAct"] = calEvent["flagAct"] === "1" ? true : false;
          element = $(dom.tmplEvent(calEvent).replace(/[\n\r]/g, ""));
          return openFancyBox(element, function() {
            var map;
            map = renderMap();
            map.setCenter(calEvent["lat"], calEvent["lng"]);
            renderMarker(map, calEvent["lat"], calEvent["lng"], false);
            return editEvent(element, calEvent);
          });
        },
        eventDrop: function(event) {
          var allDay, json;
          allDay = event.allDay ? "1" : "0";
          json = {
            "name": event.title,
            "idevent": event.id,
            "start": $.fullCalendar.formatDate(event.start, "yyyy-MM-dd HH:mm:ss"),
            "end": $.fullCalendar.formatDate(event.end, "yyyy-MM-dd HH:mm:ss"),
            "allDay": allDay,
            "description": event.description,
            "latitude": event.coords[0],
            "longitude": event.coords[1],
            "location": event.location,
            "picture": event.nameImg,
            "flagAct": event.flagAct
          };
          return $.ajax({
            "url": "/agregar-event",
            "type": "POST",
            "dataType": "JSON",
            "data": json,
            "success": function(json) {
              if (json.state === 1) {
                return location.reload();
              } else {
                return echo(json.msg);
              }
            },
            "error": function() {
              return echo("Ocurrió un error en la creación del evento. Intente nuevamente.");
            }
          });
        },
        eventResize: function(event) {
          var allDay, json;
          allDay = event.allDay ? "1" : "0";
          json = {
            "name": event.title,
            "idevent": event.id,
            "start": $.fullCalendar.formatDate(event.start, "yyyy-MM-dd HH:mm:ss"),
            "end": $.fullCalendar.formatDate(event.end, "yyyy-MM-dd HH:mm:ss"),
            "allDay": allDay,
            "description": event.description,
            "latitude": event.coords[0],
            "longitude": event.coords[1],
            "location": event.location,
            "picture": event.nameImg,
            "flagAct": event.flagAct
          };
          return $.ajax({
            "url": "/agregar-event",
            "type": "POST",
            "dataType": "JSON",
            "data": json,
            "success": function(json) {
              if (json.state === 1) {
                return location.reload();
              } else {
                return echo(json.msg);
              }
            },
            "error": function() {
              return echo("Ocurrió un error en la creación del evento. Intente nuevamente.");
            }
          });
        },
        loading: function(bool) {
          if (bool) {
            return utils.loader(dom.ctnLoad, true);
          } else {
            return utils.loader(dom.ctnLoad, false);
          }
        }
      });
    };
    openFancyBox = function(element, callback) {
      return $.fancybox({
        content: element,
        autoResize: false,
        fitToView: false,
        afterShow: callback,
        beforeClose: function() {
          if (arquitectFile !== null) {
            removeFile(arquitectFile);
            return arquitectFile = null;
          }
        }
      });
    };
    renderMap = function() {
      var map;
      return map = new GMaps({
        div: '#mapa',
        lat: coordsDefault.lat,
        lng: coordsDefault.lng,
        zoom: 14,
        panControl: false,
        mapTypeControl: false
      });
    };
    renderMarker = function(map, lat, lng, drag, evtDrag) {
      var json;
      json = {
        "lat": lat,
        "lng": lng
      };
      if (drag) {
        json = $.extend(json, {
          draggable: true,
          dragend: function(json) {
            return evtDrag(map, json);
          }
        });
      }
      return map.addMarker(json);
    };
    searchMap = function(el, map, marker) {
      var inptVal;
      dom.btnSearch = $(st.btnSearch, el);
      dom.inptSearch = $(st.inptSearch, el);
      dom.ctnMap = $(st.ctnMap, el);
      inptVal = "";
      dom.btnSearch.on("click", function() {
        inptVal = dom.inptSearch.val();
        if (inptVal !== "") {
          inptVal = inptVal + ",Perú";
          utils.loader(dom.ctnMap, true);
          return GMaps.geocode({
            address: inptVal,
            callback: function(results, status) {
              var latLng;
              if (status === "OK") {
                latLng = results[0].geometry.location;
                map.setCenter(latLng.lat(), latLng.lng());
                setLatLng(latLng);
                marker.setPosition(latLng);
                map.setZoom(14);
              } else {
                echo("No se encontró resultados para la búsqueda");
              }
              return utils.loader(dom.ctnMap, false);
            }
          });
        }
      });
      return dom.inptSearch.on("keypress", function(e) {
        if (e.which === 13) {
          dom.btnSearch.trigger("click");
          return false;
        }
      });
    };
    evtDragend = function(map, json) {
      map.panTo(json.latLng);
      setLatLng(json.latLng);
      return GMaps.geocode({
        lat: json.latLng.lat(),
        lng: json.latLng.lng(),
        callback: function(results, status) {
          console.log(results);
          if (status === "OK") {
            return $(st.inptAddress).val(results[0]['formatted_address']);
          } else {
            return echo("No se encontró la dirección que referencia el marker");
          }
        }
      });
    };
    evtFile = function(el) {
      dom.ctnFile = $(st.ctnFile);
      dom.btnFile = $(st.btnFile);
      dom.imgFile = $(st.imgFile);
      dom.inptPicture = $(st.inptPicture);
      arquitectFile = createFile(el, dom.btnFile);
      return $.jqFile({
        "nameFile": "imagen",
        "routeFile": "/agregar-picture",
        "createFile": false,
        "beforeCharge": function() {
          return utils.loader(dom.ctnFile, true);
        },
        "success": function(json) {
          if (json.state === 1) {
            dom.imgFile.attr("src", json.urlImagen);
            dom.inptPicture.val(json.nombre);
          } else {
            echo(json.msg);
          }
          return utils.loader(dom.ctnFile, false);
        },
        "error": function(state, msg) {
          utils.loader(dom.ctnFile, false);
          return echo(msg);
        }
      });
    };
    createFile = function(el, btn) {
      var file, form, optFile;
      form = $("<form />", {
        "method": "POST",
        "enctype": "multipart/form-data"
      });
      file = $("<input />", {
        "type": "file",
        "name": "imagen"
      });
      optFile = styleFile(btn);
      form.css(optFile.form);
      file.css(optFile.file);
      form.append(file);
      el.append(form);
      return {
        "form": form,
        "file": file
      };
    };
    removeFile = function(json) {
      json.file.off();
      json.form.off();
      return json.form.remove();
    };
    styleFile = function(btn) {
      var cssFile, cssForm, dimentions;
      dimentions = {
        "width": btn.outerWidth(true),
        "height": btn.outerHeight(true)
      };
      cssForm = {
        "position": "absolute",
        "overflow": "hidden",
        "-ms-filter": "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)",
        "filter": "alpha(opacity=0)",
        "opacity": 0,
        "z-index": "99",
        "left": "268px",
        "top": "637px"
      };
      cssFile = {
        "display": "block",
        "font-size": "999px",
        "cursor": "pointer"
      };
      cssForm = $.extend(cssForm, dimentions);
      cssFile = $.extend(cssFile, dimentions);
      return {
        "form": cssForm,
        "file": cssFile
      };
    };
    editEvent = function(el, calEvent) {
      return $(st.editEvent, el).on("click", function(e) {
        var element, map, marker, parentEl;
        parentEl = el.parent();
        utils.loader(parentEl, true);
        parentEl.css("height", el.height());
        el.remove();
        element = $(dom.tmplEventEdit(calEvent).replace(/[\n\r]/g, ""));
        parentEl.append(element);
        parentEl.css("height", "auto");
        validateFrm(element);
        map = renderMap();
        map.setCenter(calEvent.lat, calEvent.lng);
        marker = renderMarker(map, calEvent.lat, calEvent.lng, true, evtDragend);
        evtFile(element);
        searchMap(element, map, marker);
        return utils.loader(parentEl, false);
      });
    };
    setLatLng = function(latLng) {
      $(st.inptLat).val(latLng.lat());
      return $(st.inptLog).val(latLng.lng());
    };
    validateFrm = function(el) {
      var handler, json;
      json = yOSON.require[st.frmEvent];
      handler = {
        "submitHandler": function(frm) {
          if (typeof dom.inptPicture !== "undefined" && dom.inptPicture.val() !== "") {
            utils.loader(el, true);
            data = $(frm).serializeArray();
            $.ajax({
              "url": "/agregar-event",
              "type": "POST",
              "dataType": "JSON",
              "data": data,
              "success": function(json) {
                if (json.state === 1) {
                  return location.reload();
                } else {
                  return echo(json.msg);
                }
              },
              "error": function() {
                return echo("Ocurrió un error en la creación del evento. Intente nuevamente.");
              }
            });
          } else {
            echo("Suba la imagen del evento");
          }
          return false;
        }
      };
      return $(st.frmEvent, el).validate($.extend(json, handler));
    };
    getDate = function(dateStart, dateEnd, allDay) {
      var dateTrad, dayEnd, dayStart, hourEnd, hourStart, minEnd, minStart, monthEnd, monthStart, numEnd, numStart, yearEnd, yearStart;
      dateTrad = data.es;
      dayStart = dateTrad.dayName[dateStart.getDay()];
      numStart = dateStart.getDate();
      monthStart = dateTrad.monthNames[dateStart.getMonth()];
      hourStart = dateStart.getHours();
      minStart = dateStart.getMinutes() === 0 ? "00" : dateStart.getMinutes();
      yearStart = dateStart.getFullYear();
      if (dateEnd !== null) {
        dayEnd = dateTrad.dayName[dateEnd.getDay()];
        numEnd = dateEnd.getDate();
        monthEnd = dateTrad.monthNames[dateEnd.getMonth()];
        hourEnd = dateEnd.getHours();
        minEnd = dateEnd.getMinutes() === 0 ? "00" : dateEnd.getMinutes();
        yearEnd = dateEnd.getFullYear();
        if (equalDates(dateStart, dateEnd)) {
          if (allDay) {
            return dayStart + ", " + numStart + " " + monthStart + " " + yearStart;
          } else {
            return dayStart + ", " + numStart + " " + monthStart + " " + yearStart + ", " + hourStart + ":" + minStart + " - " + hourEnd + ":" + minEnd;
          }
        } else {
          if (allDay) {
            return dayStart + ", " + numStart + " " + monthStart + " " + yearStart + " - " + dayEnd + ", " + numEnd + " " + monthEnd + " " + yearEnd;
          } else {
            return dayStart + ", " + numStart + " " + monthStart + " " + yearStart + ", " + hourStart + ":" + minStart + " - " + dayEnd + ", " + numEnd + " " + monthEnd + " " + yearEnd + ", " + hourEnd + ":" + minEnd;
          }
        }
      } else {
        return dayStart + ", " + numStart + " " + monthStart + " " + yearStart;
      }
    };
    equalDates = function(date1, date2) {
      return date1.getDate() === date2.getDate() && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();
    };
    return {
      init: function(oParams) {
        catchDom();
        return bindEvents();
      }
    };
  }), ["libs/plugins/jqFullCalendar.js", "libs/plugins/jqUI.js", "libs/plugins/jqUnderscore.js", "libs/plugins/gmaps.js", "data/require.js", "libs/plugins/jqValidate.js", "libs/plugins/jqFile.js", "libs/plugins/jqFancybox.js"]);

  yOSON.AppCore.addModule("alerts", (function(Sb) {
    var bindEvents, catchDom, dom, st;
    st = {
      alert: ".alert"
    };
    dom = {};
    catchDom = function() {
      return dom.alert = $(st.alert);
    };
    bindEvents = function() {
      return setTimeout(function() {
        return dom.alert.slideUp(600);
      }, 5000);
    };
    return {
      init: function(oParams) {
        catchDom();
        return bindEvents();
      }
    };
  }));

}).call(this);
